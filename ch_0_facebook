```sql



WITH data_modified AS(
       SELECT age,
          CASE WHEN gender<>'male' THEN 'M'
               WHEN gender<>'female' THEN 'F' END AS gender, --conversion of labels 
           tenure,
           --classify tenure into ten differnt sub-divisions 
           (tenure-MIN(tenure) OVER())/((MAX(tenure) OVER()+1-MIN(tenure) OVER())/10)+1 AS tenure_category,
           likes,
           likes_received,
           mobile_likes,
           mobile_likes_received,
           www_likes,
           www_likes_received
           FROM facebooktbl
           --We take a closer insight into information grouped by gender and age_group. 
           --any entires which do not provide either gener or age are automatically excluded. 
           WHERE facebooktbl IS NOT NULL),
     age_grouped AS(
         SELECT CONCAT(CASE WHEN age<19 THEN ''
                             ELSE gender END,
                       CASE WHEN age BETWEEN 4 AND 12 THEN 'C'
                            WHEN age BETWEEN 13 AND 19 THEN 'T'
                            WHEN age BETWEEN 20 AND 34 THEN '1'
                            WHEN age BETWEEN 35 AND 49 THEN '2'
                            WHEN age >=50 THEN '3'END ) AS age_group,
                 tenure,
                 tenure_category, 
                 likes,
                 likes_received,
                 mobile_likes,
                 mobile_likes_received,
                 www_likes,
                 www_likes_received 
                 FROM data_modified)
           SELECT a.age_group, 
                  a.tenure,
                  a.tenure_category,
                 -- rearranging all six colummns into the section of category and counts  
                 CASE WHEN p.idx=1 THEN 'likes'
                      WHEN p.idx=2 THEN 'likes_received'
                      WHEN p.idx=3 THEN 'mobile_likes'
                      WHEN P.idx=4 THEN 'mobile_likes_received'
                      WHEN p.idx=5 THEN 'www_likes'
                      WHEN p.idx=6 THEN 'www_likes_received' END AS category,
                  CASE WHEN p.idx=1 THEN a.likes
                       WHEN p.idx=2 THEN a.likes_received
                       WHEN P.idx=3 THEN a.mobile_likes
                       WHEN p.idx=4 THEN a.mobile_likes_received
                       WHEN p.idx=5 THEN a.www_likes
                       WHEN p.idx=6 THEN a.www_likes_received END AS counts
                  FROM age_grouped AS a
                  CROSS JOIN(
                  SELECT GENERATE_SERIES(1,6) AS idx) AS p;

    ```
